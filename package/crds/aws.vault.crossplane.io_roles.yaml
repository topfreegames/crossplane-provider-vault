---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: roles.aws.vault.crossplane.io
spec:
  group: aws.vault.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - vault
    kind: Role
    listKind: RoleList
    plural: roles
    singular: role
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: A Role is an example API type.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: A RoleSpec defines the desired state of a Role.
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                description: RoleParameters are the configurable fields of a Role.
                properties:
                  authBackend:
                    description: Backend - (Required) The path the AWS secret backend
                      is mounted at, with no leading or trailing /s.
                    type: string
                  credentialType:
                    description: CredentialType - (Required) Specifies the type of
                      credential to be used when retrieving credentials from the role.
                      Must be one of iam_user, assumed_role, or federation_token.
                    type: string
                  defaultStsTtl:
                    description: DefaultStsTTL -  (Optional) The default TTL in seconds
                      for STS credentials. When a TTL is not specified when STS credentials
                      are requested, and a default TTL is specified on the role, then
                      this default TTL will be used. Valid only when credential_type
                      is one of assumed_role or federation_token.
                    type: integer
                  iamGroups:
                    description: IamGroups - (Optional) A list of IAM group names.
                      IAM users generated against this vault role will be added to
                      these IAM Groups. For a credential type of assumed_role or federation_token,
                      the policies sent to the corresponding AWS call (sts:AssumeRole
                      or sts:GetFederation) will be the policies from each group in
                      iam_groups combined with the policy_document and policy_arns
                      parameters.
                    items:
                      type: string
                    type: array
                  iamRoles:
                    description: IamRolesArn - (Optional) Specifies the ARNs of the
                      AWS roles this Vault role is allowed to assume. Required when
                      credential_type is assumed_role and prohibited otherwise.
                    items:
                      type: string
                    type: array
                  maxStsTtl:
                    description: MaxStsTTL - (Optional) The max allowed TTL in seconds
                      for STS credentials (credentials TTL are capped to max_sts_ttl).
                      Valid only when credential_type is one of assumed_role or federation_token.
                    type: integer
                  permissionsBoundaryArn:
                    description: PermissionBoundaryArn - (Optional) The ARN of the
                      AWS Permissions Boundary to attach to IAM users created in the
                      role. Valid only when credential_type is iam_user. If not specified,
                      then no permissions boundary policy will be attached.
                    type: string
                  policiesArn:
                    description: PoliciesArn - (Optional) Specifies a list of AWS
                      managed policy ARNs. The behavior depends on the credential
                      type. With iam_user, the policies will be attached to IAM users
                      when they are requested. With assumed_role and federation_token,
                      the policy ARNs will act as a filter on what the credentials
                      can do, similar to policy_document. When credential_type is
                      iam_user or federation_token, at least one of policy_document
                      or policy_arns must be specified.
                    items:
                      type: string
                    type: array
                  policyDocument:
                    description: PolicyDocument - (Optional) The IAM policy document
                      for the role. The behavior depends on the credential type. With
                      iam_user, the policy document will be attached to the IAM user
                      generated and augment the permissions the IAM user has. With
                      assumed_role and federation_token, the policy document will
                      act as a filter on what the credentials can do, similar to policy_arns.
                    type: string
                  userPath:
                    description: UserPath - (Optional) The path for the user name.
                      Valid only when credential_type is iam_user. Default is /.
                    type: string
                required:
                - authBackend
                - credentialType
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: A RoleStatus represents the observed state of a Role.
            properties:
              atProvider:
                description: RoleObservation are the observable fields of a Role.
                properties:
                  observableField:
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
